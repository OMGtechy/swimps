#pragma once

#include <tuple>

namespace {
    template <typename T>
    constexpr inline std::tuple<swimps::container::Span<char>, size_t> format_integer(
        swimps::container::Span<char> target,
        T value)
        requires std::integral<T> {

        size_t bytesWritten = 0;

        if (value == 0) {
            target[0] = '0';
            target += 1;
            bytesWritten += 1;
            return std::make_tuple(target, bytesWritten);
        }

        // If the value is a negative, write '-' into the target buffer.
        if (value < 0) {
            assert(target.current_size() != 0);
            target[0] = '-';
            bytesWritten += 1;

            target += 1;

            value = value * -1;

            if (target.current_size() == 0) {
                // No room for anything other then the '-' sign.
                return std::make_tuple(target, bytesWritten);
            }
        }

        const unsigned int numberOfDigitsInValue = floor(log10(abs(value))) + 1;
        unsigned int numberOfDigitsInValueLeft = numberOfDigitsInValue;

        assert(target.current_size() != 0);

        // Ensure that we do not write to memory we do not own.
        while (target.current_size() <= numberOfDigitsInValueLeft - 1)
        {
            numberOfDigitsInValueLeft -= 1;
            value /= 10;
        }

        unsigned int numberOfDigitsWritten = 0;
        while (target.current_size() > 0 && value > 0 && numberOfDigitsInValueLeft != 0)
        {
            target[numberOfDigitsInValueLeft - 1] = '0' + (value % 10);
            bytesWritten += 1;
            numberOfDigitsInValueLeft -= 1;
            numberOfDigitsWritten += 1;
            value /= 10;
        }

        target += numberOfDigitsWritten;
        return std::make_tuple(target, bytesWritten);
    }
}

namespace swimps::io {
    inline size_t format_string(
        swimps::container::Span<const char> format,
        swimps::container::Span<char> target) {
        const size_t bytesToWrite = std::min(target.current_size(), format.current_size());
        memcpy(&target[0], &format[0], bytesToWrite);
        return bytesToWrite;
    }

    template <typename T, typename... ArgTypes>
    inline size_t format_string(
        swimps::container::Span<const char> format,
        swimps::container::Span<char> target,
        const T firstArg,
        const ArgTypes ... otherArgs) {

        size_t bytesWritten = 0;
        const size_t bytesToProcess = std::min(format.current_size(), target.current_size());

        // The return value is either:
        // 1) NULL, meaning the we're done.
        // 2) A pointer to the character after the % in the target buffer,
        //    meaning some formatting needs doing.
        const char* const formatCharacterTarget = static_cast<char*>(
            memccpy(
                &target[0],
                &format[0],
                '%',
                bytesToProcess
            )
        );

        {
            assert(formatCharacterTarget == NULL || *(formatCharacterTarget - 1) == '%');
            const bool foundAPercentSign =
                formatCharacterTarget != NULL;

            const size_t newBytesWritten =
                !foundAPercentSign ? bytesToProcess
                                   : static_cast<size_t>(formatCharacterTarget - &target[0]);

            format += newBytesWritten;

            // Overwrite % sign if present.
            target += newBytesWritten - 1;

            bytesWritten += newBytesWritten;
        }

        if (formatCharacterTarget == NULL || target.current_size() == 0) {
            // end of string!
            return bytesWritten;
        }

        // Overwriting % sign, so one less byte written.
        bytesWritten -= 1;

        do {
            if constexpr (std::is_same_v<int, T>) {

                const auto formatResult = format_integer(target, firstArg);
                target = std::get<swimps::container::Span<char>>(formatResult);
                bytesWritten += std::get<size_t>(formatResult);

            } else if constexpr (std::is_same_v<T, const char*> || std::is_same_v<T, char*>) {
                const char* const value = firstArg;
                for (size_t index = 0; value[index] != '\0' || target.current_size() == 0; ++index)
                {
                    target[0] = value[index];
                    target += 1;
                    bytesWritten += 1;
                }
            } else {
                target[0] = '?';
                target += 1;
                bytesWritten += 1;
            }
        } while (false);

        return bytesWritten + format_string(format, target, otherArgs...);
    }
}
